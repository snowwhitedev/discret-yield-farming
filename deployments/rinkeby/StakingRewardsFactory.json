{
  "address": "0x35C581b2B121086530e9E664617710c6d1d45CC8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingRewardsGenesis",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingRewards",
          "type": "address"
        }
      ],
      "name": "DeployStakingRewardsFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "name": "claimRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewardAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pullExtraTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingRewardsGenesis",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingRewardsInfoByStakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakingRewards",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakingTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf8b31a9be566f25c680ffd4571e1afcb8cbbd992ac8fff03b4693f090062747",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x35C581b2B121086530e9E664617710c6d1d45CC8",
    "transactionIndex": 6,
    "gasUsed": "1889103",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000c00000000000000000004000000000000400000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xfb9be72fe37b760ce312cde08e00ce14e9193c2494dc93973de9ef24cad42cc1",
    "transactionHash": "0xbf8b31a9be566f25c680ffd4571e1afcb8cbbd992ac8fff03b4693f090062747",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 10411947,
        "transactionHash": "0xbf8b31a9be566f25c680ffd4571e1afcb8cbbd992ac8fff03b4693f090062747",
        "address": "0x35C581b2B121086530e9E664617710c6d1d45CC8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xfb9be72fe37b760ce312cde08e00ce14e9193c2494dc93973de9ef24cad42cc1"
      }
    ],
    "blockNumber": 10411947,
    "cumulativeGasUsed": "2096609",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc20d9bd10Fe015C9d1a69B2A5739B248fab7f8e7",
    10000
  ],
  "solcInputHash": "78c128b109c7c2f09d7cdcb3544f3fc4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingRewardsGenesis\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingRewards\",\"type\":\"address\"}],\"name\":\"DeployStakingRewardsFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"claimRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullExtraTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardsGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingRewardsInfoByStakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingRewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingRewardsFactory.sol\":\"StakingRewardsFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IStakingRewards {\\r\\n  // Views\\r\\n  function lastTimeRewardApplicable() external view returns (uint256);\\r\\n\\r\\n  function rewardPerToken() external view returns (uint256);\\r\\n\\r\\n  function earned(address account) external view returns (uint256);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  // function getRewardForDuration() external view returns (uint256);\\r\\n\\r\\n  // function viewLockingTimeStamp() external view returns (uint256);\\r\\n\\r\\n  // Mutative\\r\\n\\r\\n  function stake(uint256 amount) external;\\r\\n\\r\\n  function withdraw(uint256 amount) external;\\r\\n\\r\\n  function getReward() external;\\r\\n\\r\\n  function quit() external;\\r\\n\\r\\n  // Events\\r\\n\\r\\n  event DefaultInitialization();\\r\\n  event RewardAdded(uint256 reward, uint256 periodFinish);\\r\\n  event Staked(address indexed user, uint256 amount);\\r\\n  event Withdrawn(address indexed user, uint256 amount);\\r\\n  event RewardPaid(address indexed user, uint256 reward);\\r\\n  event Recovered(\\r\\n        address indexed tokenAddress,\\r\\n        address indexed to,\\r\\n        uint256 amount\\r\\n  );\\r\\n}\\r\\n\",\"keccak256\":\"0x9de711ad955937bb74217b1d10dc202d93c4aecd15e2c5dab220b53043f4d350\",\"license\":\"MIT\"},\"contracts/RewardsDistributionRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract RewardsDistributionRecipient {\\r\\n  address public rewardsDistribution;\\r\\n\\r\\n  function claimRewardAmount(uint256 reward, uint256 duration) external virtual;\\r\\n\\r\\n  modifier onlyRewardsDistribution() {\\r\\n    require(\\r\\n      msg.sender == rewardsDistribution,\\r\\n      \\\"Caller is not RewardsDistribution contract\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x012f17957d5afd8d223b960306a0e9ac2f3b467ede4ac2c855827100c96ab219\",\"license\":\"MIT\"},\"contracts/StakingRewardsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IStakingRewards.sol\\\";\\r\\nimport \\\"./RewardsDistributionRecipient.sol\\\";\\r\\n\\r\\ncontract StakingRewards is\\r\\n  IStakingRewards,\\r\\n  RewardsDistributionRecipient,\\r\\n  ReentrancyGuard\\r\\n{\\r\\n  using SafeMath for uint256;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /* ========== STATE VARIABLES ========== */\\r\\n  IERC20 public immutable rewardsToken; // we can set it as immutable to reduce gas\\r\\n  IERC20 public immutable stakingToken; // we can set it as immutable to reduce gas\\r\\n  uint256 public periodFinish; // no need to set 0 value\\r\\n  uint256 public rewardRate;   // no need to set 0 value\\r\\n  uint256 public lastUpdateTime;\\r\\n  uint256 public rewardPerTokenStored;\\r\\n\\r\\n  mapping(address => uint256) public userRewardPerTokenPaid;\\r\\n  mapping(address => uint256) public rewards;\\r\\n\\r\\n  uint256 private _totalSupply;\\r\\n  mapping(address => uint256) private _balances;\\r\\n  mapping(address => uint256) private _lockingTimeStamp;\\r\\n\\r\\n  /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n  constructor(\\r\\n    address _rewardsDistribution,\\r\\n    address _rewardsToken,\\r\\n    address _stakingToken\\r\\n  ) {\\r\\n    rewardsToken = IERC20(_rewardsToken);\\r\\n    stakingToken = IERC20(_stakingToken);\\r\\n    rewardsDistribution = _rewardsDistribution;\\r\\n  }\\r\\n\\r\\n  /* ========== VIEWS ========== */\\r\\n\\r\\n  function totalSupply() external view override returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) external view override returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  function lastTimeRewardApplicable() public view override returns (uint256) {\\r\\n    return Math.min(block.timestamp, periodFinish);\\r\\n  }\\r\\n\\r\\n  function rewardPerToken() public view override returns (uint256) {\\r\\n    if (_totalSupply == 0) {\\r\\n      return rewardPerTokenStored;\\r\\n    }\\r\\n    return\\r\\n      rewardPerTokenStored.add(\\r\\n        lastTimeRewardApplicable()\\r\\n          .sub(lastUpdateTime)\\r\\n          .mul(rewardRate)\\r\\n          .mul(1e24)\\r\\n          .div(_totalSupply)\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function earned(address account) public view override returns (uint256) {\\r\\n    return\\r\\n      _balances[account]\\r\\n        .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\r\\n        .div(1e24)\\r\\n        .add(rewards[account]);\\r\\n  }\\r\\n\\r\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n  function stake(uint256 amount)\\r\\n    external\\r\\n    override\\r\\n    updateReward(msg.sender)\\r\\n  {\\r\\n    require(_lockingTimeStamp[msg.sender] == 0);\\r\\n    _totalSupply = _totalSupply.add(amount);\\r\\n    _balances[msg.sender] = _balances[msg.sender].add(amount);\\r\\n    _lockingTimeStamp[msg.sender] = 0;\\r\\n    stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n    emit Staked(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function stakeTransferWithBalance(\\r\\n    uint256 amount,\\r\\n    address useraddress,\\r\\n    uint256 lockingPeriod\\r\\n  ) external updateReward(useraddress) {\\r\\n    require(_balances[useraddress] == 0, \\\"Already staked by user\\\");\\r\\n    _totalSupply = _totalSupply.add(amount);\\r\\n    _balances[useraddress] = _balances[useraddress].add(amount);\\r\\n    _lockingTimeStamp[useraddress] = lockingPeriod; // setting user locking ts\\r\\n    stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n    emit Staked(useraddress, amount);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 amount)\\r\\n    public\\r\\n    override\\r\\n    nonReentrant\\r\\n    updateReward(msg.sender)\\r\\n  {\\r\\n    require(_lockingTimeStamp[msg.sender] == 0, \\\"Still in locking period\\\");\\r\\n    _totalSupply = _totalSupply.sub(amount);\\r\\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\\r\\n    stakingToken.safeTransfer(msg.sender, amount);\\r\\n    emit Withdrawn(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function getReward() public override updateReward(msg.sender) {\\r\\n    uint256 reward = rewards[msg.sender];\\r\\n    if (reward > 0) {\\r\\n      rewards[msg.sender] = 0;\\r\\n      rewardsToken.safeTransfer(msg.sender, reward);\\r\\n      emit RewardPaid(msg.sender, reward);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function quit() external override {\\r\\n    withdraw(_balances[msg.sender]);\\r\\n    getReward();\\r\\n  }\\r\\n\\r\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n  function claimRewardAmount(uint256 reward, uint256 rewardsDuration)\\r\\n    external\\r\\n    override\\r\\n    onlyRewardsDistribution\\r\\n    updateReward(address(0))\\r\\n  {\\r\\n    require(\\r\\n      block.timestamp.add(rewardsDuration) >= periodFinish,\\r\\n      \\\"Cannot reduce existing period\\\"\\r\\n    );\\r\\n\\r\\n    if (block.timestamp >= periodFinish) {\\r\\n      rewardRate = reward.div(rewardsDuration);\\r\\n    } else {\\r\\n      uint256 remaining = periodFinish.sub(block.timestamp);\\r\\n      uint256 leftover = remaining.mul(rewardRate);\\r\\n      rewardRate = reward.add(leftover).div(rewardsDuration);\\r\\n    }\\r\\n\\r\\n    uint256 balance = rewardsToken != stakingToken\\r\\n      ? rewardsToken.balanceOf(address(this))\\r\\n      : rewardsToken.balanceOf(address(this)) - _totalSupply;\\r\\n  \\r\\n    require(\\r\\n      rewardRate <= balance.div(rewardsDuration),\\r\\n      \\\"Provided reward too high\\\"\\r\\n    );\\r\\n\\r\\n    lastUpdateTime = block.timestamp;\\r\\n    periodFinish = block.timestamp.add(rewardsDuration);\\r\\n    emit RewardAdded(reward, periodFinish);\\r\\n  }\\r\\n\\r\\n  /* ========== MODIFIERS ========== */\\r\\n\\r\\n  modifier updateReward(address account) {\\r\\n    rewardPerTokenStored = rewardPerToken();\\r\\n    lastUpdateTime = lastTimeRewardApplicable();\\r\\n    if (account != address(0)) {\\r\\n      rewards[account] = earned(account);\\r\\n      userRewardPerTokenPaid[account] = rewardPerTokenStored;\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract StakingRewardsFactory is Ownable, ReentrancyGuard {\\r\\n  event DeployStakingRewardsFactory(address indexed stakingRewards);\\r\\n\\r\\n  using Address for address;\\r\\n\\r\\n  address public rewardsToken;\\r\\n  uint256 public stakingRewardsGenesis;\\r\\n\\r\\n  address[] public stakingTokens;\\r\\n\\r\\n  struct StakingRewardsInfo {\\r\\n    address stakingRewards;\\r\\n    uint256 rewardAmount;\\r\\n    uint256 duration;\\r\\n  }\\r\\n\\r\\n  mapping(address => StakingRewardsInfo)\\r\\n    public stakingRewardsInfoByStakingToken;\\r\\n\\r\\n  constructor(address _rewardsToken, uint256 _stakingRewardsGenesis) {\\r\\n    require(_rewardsToken.isContract(), \\\"Should be deployed contract\\\");\\r\\n    rewardsToken = _rewardsToken;\\r\\n    stakingRewardsGenesis = _stakingRewardsGenesis;\\r\\n  }\\r\\n\\r\\n  function deploy(\\r\\n    address stakingToken,\\r\\n    uint256 rewardAmount,\\r\\n    uint256 rewardsDuration\\r\\n  ) public onlyOwner {\\r\\n    require(stakingToken.isContract(), \\\"It should be deployed contract\\\");\\r\\n    StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[\\r\\n      stakingToken\\r\\n    ];\\r\\n    require(\\r\\n      info.stakingRewards == address(0),\\r\\n      \\\"StakingRewardsFactory::deploy: already deployed\\\"\\r\\n    );\\r\\n\\r\\n    info.stakingRewards = address(\\r\\n      new StakingRewards(address(this), rewardsToken, stakingToken)\\r\\n    );\\r\\n    info.rewardAmount = rewardAmount;\\r\\n    info.duration = rewardsDuration;\\r\\n    stakingTokens.push(stakingToken);\\r\\n\\r\\n    emit DeployStakingRewardsFactory(info.stakingRewards);\\r\\n  }\\r\\n\\r\\n  function update(\\r\\n    address stakingToken,\\r\\n    uint256 rewardAmount,\\r\\n    uint256 rewardsDuration\\r\\n  ) public onlyOwner {\\r\\n    StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[\\r\\n      stakingToken\\r\\n    ];\\r\\n    require(\\r\\n      info.stakingRewards != address(0),\\r\\n      \\\"StakingRewardsFactory::update: not deployed\\\"\\r\\n    );\\r\\n\\r\\n    info.rewardAmount = rewardAmount;\\r\\n    info.duration = rewardsDuration;\\r\\n  }\\r\\n\\r\\n  function claimRewardAmounts() external nonReentrant {\\r\\n    require(\\r\\n      stakingTokens.length > 0,\\r\\n      \\\"StakingRewardsFactory::claimRewardAmounts: called before any deploys\\\"\\r\\n    );\\r\\n    for (uint256 i = 0; i < stakingTokens.length; i++) {\\r\\n      claimRewardAmount(stakingTokens[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function claimRewardAmount(address stakingToken) public nonReentrant {\\r\\n    _claimRewardAmount(stakingToken);\\r\\n  }\\r\\n\\r\\n  function _claimRewardAmount(address stakingToken) private {\\r\\n    StakingRewardsInfo storage info = stakingRewardsInfoByStakingToken[\\r\\n      stakingToken\\r\\n    ];\\r\\n    require(\\r\\n      info.stakingRewards != address(0),\\r\\n      \\\"StakingRewardsFactory::claimRewardAmount: not deployed\\\"\\r\\n    );\\r\\n\\r\\n    if (info.rewardAmount > 0 && info.duration > 0) {\\r\\n      uint256 rewardAmount = info.rewardAmount;\\r\\n      uint256 duration = info.duration;\\r\\n      info.rewardAmount = 0;\\r\\n      info.duration = 0;\\r\\n\\r\\n      require(\\r\\n        IERC20(rewardsToken).transfer(info.stakingRewards, rewardAmount),\\r\\n        \\\"StakingRewardsFactory::claimRewardAmount: transfer failed\\\"\\r\\n      );\\r\\n      StakingRewards(info.stakingRewards).claimRewardAmount(\\r\\n        rewardAmount,\\r\\n        duration\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function pullExtraTokens(address token, uint256 amount) external onlyOwner {\\r\\n    IERC20(token).transfer(msg.sender, amount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x62211e49913c107593eb93fb18e5adf261617ad7cc4f69b38525b39ee04a3139\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516120f83803806120f883398101604081905261002f91610133565b610038336100d4565b6001808190555061005b826001600160a01b031661012460201b6107f81760201c565b6100ab5760405162461bcd60e51b815260206004820152601b60248201527f53686f756c64206265206465706c6f79656420636f6e74726163740000000000604482015260640160405180910390fd5b600280546001600160a01b0319166001600160a01b03939093169290921790915560035561016b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03163b151590565b60008060408385031215610145578182fd5b82516001600160a01b038116811461015b578283fd5b6020939093015192949293505050565b611f7e8061017a6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063bf44ba6c11610071578063bf44ba6c1461018c578063cc0b713814610194578063cfda5478146101a7578063d09b6d43146101ba578063d1af0c7d146101cd578063f2fde38b146101e057600080fd5b8063344e5e34146100b95780636cf8caf8146100e9578063715018a6146101475780637572719e146101515780638da5cb5b14610164578063a0928c1114610175575b600080fd5b6100cc6100c7366004610b3d565b6101f3565b6040516001600160a01b0390911681526020015b60405180910390f35b6101226100f7366004610aa1565b6005602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b0390941684526020840192909252908201526060016100e0565b61014f61021d565b005b61014f61015f366004610ac2565b61025c565b6000546001600160a01b03166100cc565b61017e60035481565b6040519081526020016100e0565b61014f61030b565b61014f6101a2366004610aa1565b61044a565b61014f6101b5366004610aeb565b6104ab565b61014f6101c8366004610aeb565b6106a4565b6002546100cc906001600160a01b031681565b61014f6101ee366004610aa1565b61075d565b6004818154811061020357600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146102505760405162461bcd60e51b815260040161024790610b55565b60405180910390fd5b61025a6000610807565b565b6000546001600160a01b031633146102865760405162461bcd60e51b815260040161024790610b55565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb90604401602060405180830381600087803b1580156102ce57600080fd5b505af11580156102e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103069190610b1d565b505050565b6002600154141561035e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610247565b60026001556004546103e65760405162461bcd60e51b8152602060048201526044602482018190527f5374616b696e6752657761726473466163746f72793a3a636c61696d52657761908201527f7264416d6f756e74733a2063616c6c6564206265666f726520616e79206465706064820152636c6f797360e01b608482015260a401610247565b60005b600454811015610443576104316004828154811061041757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031661044a565b8061043b81610b8a565b9150506103e9565b5060018055565b6002600154141561049d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610247565b600260015561044381610857565b6000546001600160a01b031633146104d55760405162461bcd60e51b815260040161024790610b55565b6001600160a01b0383163b61052c5760405162461bcd60e51b815260206004820152601e60248201527f49742073686f756c64206265206465706c6f79656420636f6e747261637400006044820152606401610247565b6001600160a01b0380841660009081526005602052604090208054909116156105af5760405162461bcd60e51b815260206004820152602f60248201527f5374616b696e6752657761726473466163746f72793a3a6465706c6f793a206160448201526e1b1c9958591e4819195c1b1bde5959608a1b6064820152608401610247565b60025460405130916001600160a01b03169086906105cc90610a78565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f080158015610608573d6000803e3d6000fd5b5081546001600160a01b03199081166001600160a01b0392831617835560018084018690556002840185905560048054918201815560009081527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910180549092168784161790915582546040519216917f94f0453a2a5fef23c33126f41a260b4373e1e86d6206cffe1cae46d1ddb906119190a250505050565b6000546001600160a01b031633146106ce5760405162461bcd60e51b815260040161024790610b55565b6001600160a01b038084166000908152600560205260409020805490911661074c5760405162461bcd60e51b815260206004820152602b60248201527f5374616b696e6752657761726473466163746f72793a3a7570646174653a206e60448201526a1bdd0819195c1b1bde595960aa1b6064820152608401610247565b600181019290925560029091015550565b6000546001600160a01b031633146107875760405162461bcd60e51b815260040161024790610b55565b6001600160a01b0381166107ec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610247565b6107f581610807565b50565b6001600160a01b03163b151590565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03808216600090815260056020526040902080549091166108e05760405162461bcd60e51b815260206004820152603660248201527f5374616b696e6752657761726473466163746f72793a3a636c61696d526577616044820152751c99105b5bdd5b9d0e881b9bdd0819195c1b1bde595960521b6064820152608401610247565b600081600101541180156108f8575060008160020154115b15610a74576001810180546002808401805460009485905593905554835460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905292939291169063a9059cbb90604401602060405180830381600087803b15801561096357600080fd5b505af1158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190610b1d565b610a0d5760405162461bcd60e51b815260206004820152603960248201527f5374616b696e6752657761726473466163746f72793a3a636c61696d5265776160448201527f7264416d6f756e743a207472616e73666572206661696c6564000000000000006064820152608401610247565b825460405163e5cd8a6f60e01b815260048101849052602481018390526001600160a01b039091169063e5cd8a6f90604401600060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b5050505050505b5050565b61139780610bb283390190565b80356001600160a01b0381168114610a9c57600080fd5b919050565b600060208284031215610ab2578081fd5b610abb82610a85565b9392505050565b60008060408385031215610ad4578081fd5b610add83610a85565b946020939093013593505050565b600080600060608486031215610aff578081fd5b610b0884610a85565b95602085013595506040909401359392505050565b600060208284031215610b2e578081fd5b81518015158114610abb578182fd5b600060208284031215610b4e578081fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000600019821415610baa57634e487b7160e01b81526011600452602481fd5b506001019056fe60c060405234801561001057600080fd5b5060405161139738038061139783398101604081905261002f9161008e565b60018055606091821b6001600160601b0319908116608052911b1660a052600080546001600160a01b0319166001600160a01b03929092169190911790556100d0565b80516001600160a01b038116811461008957600080fd5b919050565b6000806000606084860312156100a2578283fd5b6100ab84610072565b92506100b960208501610072565b91506100c760408501610072565b90509250925092565b60805160601c60a05160601c611264610133600039600081816101f4015281816104aa015281816107250152818161086f0152610aa10152600081816102830152818161059d01528181610acb01528181610b110152610bb701526112646000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c806380faa57d116100ad578063d1af0c7d11610071578063d1af0c7d1461027e578063df136d65146102a5578063e5cd8a6f146102ae578063ebe2b12b146102c1578063fc2b8cc3146102ca57600080fd5b806380faa57d146102325780638b8763471461023a578063a694fc3a1461025a578063c8f33c911461026d578063cd3daf9d1461027657600080fd5b80633fc6df6e116100f45780633fc6df6e1461019b57806370a08231146101c657806372f702f3146101ef5780637b0a47ee146102165780637b4638e71461021f57600080fd5b80628cc262146101305780630700037d1461015657806318160ddd146101765780632e1a7d4d1461017e5780633d18b91214610193575b600080fd5b61014361013e366004611070565b6102d2565b6040519081526020015b60405180910390f35b610143610164366004611070565b60076020526000908152604090205481565b600854610143565b61019161018c3660046110aa565b610352565b005b610191610516565b6000546101ae906001600160a01b031681565b6040516001600160a01b03909116815260200161014d565b6101436101d4366004611070565b6001600160a01b031660009081526009602052604090205490565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b61014360035481565b61019161022d3660046110da565b610607565b610143610796565b610143610248366004611070565b60066020526000908152604090205481565b6101916102683660046110aa565b6107a9565b61014360045481565b6101436108d1565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b61014360055481565b6101916102bc36600461110e565b61091f565b61014360025481565b610191610ceb565b6001600160a01b038116600090815260076020908152604080832054600690925282205461034c91906103469069d3c21bcecceda100000090610340906103219061031b6108d1565b90610d0e565b6001600160a01b03881660009081526009602052604090205490610d21565b90610d2d565b90610d39565b92915050565b600260015414156103aa5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155336103b86108d1565b6005556103c3610796565b6004556001600160a01b0381161561040a576103de816102d2565b6001600160a01b0382166000908152600760209081526040808320939093556005546006909152919020555b336000908152600a6020526040902054156104675760405162461bcd60e51b815260206004820152601760248201527f5374696c6c20696e206c6f636b696e6720706572696f6400000000000000000060448201526064016103a1565b6008546104749083610d0e565b600855336000908152600960205260409020546104919083610d0e565b336000818152600960205260409020919091556104d9907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169084610d45565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a2505060018055565b3361051f6108d1565b60055561052a610796565b6004556001600160a01b0381161561057157610545816102d2565b6001600160a01b0382166000908152600760209081526040808320939093556005546006909152919020555b33600090815260076020526040902054801561060357336000818152600760205260408120556105cc907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083610d45565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486906020015b60405180910390a25b5050565b816106106108d1565b60055561061b610796565b6004556001600160a01b0381161561066257610636816102d2565b6001600160a01b0382166000908152600760209081526040808320939093556005546006909152919020555b6001600160a01b038316600090815260096020526040902054156106c15760405162461bcd60e51b815260206004820152601660248201527520b63932b0b23c9039ba30b5b2b210313c903ab9b2b960511b60448201526064016103a1565b6008546106ce9085610d39565b6008556001600160a01b0383166000908152600960205260409020546106f49085610d39565b6001600160a01b03808516600090815260096020908152604080832094909455600a90529190912083905561074d907f000000000000000000000000000000000000000000000000000000000000000016333087610dad565b826001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8560405161078891815260200190565b60405180910390a250505050565b60006107a442600254610deb565b905090565b336107b26108d1565b6005556107bd610796565b6004556001600160a01b03811615610804576107d8816102d2565b6001600160a01b0382166000908152600760209081526040808320939093556005546006909152919020555b336000908152600a60205260409020541561081e57600080fd5b60085461082b9083610d39565b600855336000908152600960205260409020546108489083610d39565b33600081815260096020908152604080832094909455600a90529182209190915561089f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316903085610dad565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d906020016105fa565b6000600854600014156108e5575060055490565b6107a461091660085461034069d3c21bcecceda100000061091060035461091060045461031b610796565b90610d21565b60055490610d39565b6000546001600160a01b0316331461098c5760405162461bcd60e51b815260206004820152602a60248201527f43616c6c6572206973206e6f742052657761726473446973747269627574696f6044820152691b8818dbdb9d1c9858dd60b21b60648201526084016103a1565b60006109966108d1565b6005556109a1610796565b6004556001600160a01b038116156109e8576109bc816102d2565b6001600160a01b0382166000908152600760209081526040808320939093556005546006909152919020555b6002546109f54284610d39565b1015610a435760405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f7420726564756365206578697374696e6720706572696f6400000060448201526064016103a1565b6002544210610a5e57610a568383610d2d565b600355610a9d565b600254600090610a6e9042610d0e565b90506000610a8760035483610d2190919063ffffffff16565b9050610a97846103408784610d39565b60035550505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161415610ba2576008546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610b5b57600080fd5b505afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9391906110c2565b610b9d91906111d5565b610c39565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610c0157600080fd5b505afa158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3991906110c2565b9050610c458184610d2d565b6003541115610c965760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f2068696768000000000000000060448201526064016103a1565b426004819055610ca69084610d39565b60028190556040805186815260208101929092527f6c07ee05dcf262f13abf9d87b846ee789d2f90fe991d495acd7d7fc109ee1f55910160405180910390a150505050565b33600090815260096020526040902054610d0490610352565b610d0c610516565b565b6000610d1a82846111d5565b9392505050565b6000610d1a82846111b6565b6000610d1a8284611196565b6000610d1a828461117e565b6040516001600160a01b038316602482015260448101829052610da890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610e01565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610de59085906323b872dd60e01b90608401610d71565b50505050565b6000818310610dfa5781610d1a565b5090919050565b6000610e56826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610ed39092919063ffffffff16565b805190915015610da85780806020019051810190610e74919061108a565b610da85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103a1565b6060610ee28484600085610eea565b949350505050565b606082471015610f4b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103a1565b6001600160a01b0385163b610fa25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103a1565b600080866001600160a01b03168587604051610fbe919061112f565b60006040518083038185875af1925050503d8060008114610ffb576040519150601f19603f3d011682016040523d82523d6000602084013e611000565b606091505b509150915061101082828661101b565b979650505050505050565b6060831561102a575081610d1a565b82511561103a5782518084602001fd5b8160405162461bcd60e51b81526004016103a1919061114b565b80356001600160a01b038116811461106b57600080fd5b919050565b600060208284031215611081578081fd5b610d1a82611054565b60006020828403121561109b578081fd5b81518015158114610d1a578182fd5b6000602082840312156110bb578081fd5b5035919050565b6000602082840312156110d3578081fd5b5051919050565b6000806000606084860312156110ee578182fd5b833592506110fe60208501611054565b9150604084013590509250925092565b60008060408385031215611120578182fd5b50508035926020909101359150565b600082516111418184602087016111ec565b9190910192915050565b602081526000825180602084015261116a8160408501602087016111ec565b601f01601f19169190910160400192915050565b6000821982111561119157611191611218565b500190565b6000826111b157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156111d0576111d0611218565b500290565b6000828210156111e7576111e7611218565b500390565b60005b838110156112075781810151838201526020016111ef565b83811115610de55750506000910152565b634e487b7160e01b600052601160045260246000fdfea26469706673582212208130abf3deb4c5bd0a069a91206d5356878f1544523a08ca1e118260b2747a0364736f6c63430008040033a26469706673582212206c026d50eec67f384862621e87447a941decb21f0932e3380699881fd2c7fd8264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063bf44ba6c11610071578063bf44ba6c1461018c578063cc0b713814610194578063cfda5478146101a7578063d09b6d43146101ba578063d1af0c7d146101cd578063f2fde38b146101e057600080fd5b8063344e5e34146100b95780636cf8caf8146100e9578063715018a6146101475780637572719e146101515780638da5cb5b14610164578063a0928c1114610175575b600080fd5b6100cc6100c7366004610b3d565b6101f3565b6040516001600160a01b0390911681526020015b60405180910390f35b6101226100f7366004610aa1565b6005602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b0390941684526020840192909252908201526060016100e0565b61014f61021d565b005b61014f61015f366004610ac2565b61025c565b6000546001600160a01b03166100cc565b61017e60035481565b6040519081526020016100e0565b61014f61030b565b61014f6101a2366004610aa1565b61044a565b61014f6101b5366004610aeb565b6104ab565b61014f6101c8366004610aeb565b6106a4565b6002546100cc906001600160a01b031681565b61014f6101ee366004610aa1565b61075d565b6004818154811061020357600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146102505760405162461bcd60e51b815260040161024790610b55565b60405180910390fd5b61025a6000610807565b565b6000546001600160a01b031633146102865760405162461bcd60e51b815260040161024790610b55565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb90604401602060405180830381600087803b1580156102ce57600080fd5b505af11580156102e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103069190610b1d565b505050565b6002600154141561035e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610247565b60026001556004546103e65760405162461bcd60e51b8152602060048201526044602482018190527f5374616b696e6752657761726473466163746f72793a3a636c61696d52657761908201527f7264416d6f756e74733a2063616c6c6564206265666f726520616e79206465706064820152636c6f797360e01b608482015260a401610247565b60005b600454811015610443576104316004828154811061041757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031661044a565b8061043b81610b8a565b9150506103e9565b5060018055565b6002600154141561049d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610247565b600260015561044381610857565b6000546001600160a01b031633146104d55760405162461bcd60e51b815260040161024790610b55565b6001600160a01b0383163b61052c5760405162461bcd60e51b815260206004820152601e60248201527f49742073686f756c64206265206465706c6f79656420636f6e747261637400006044820152606401610247565b6001600160a01b0380841660009081526005602052604090208054909116156105af5760405162461bcd60e51b815260206004820152602f60248201527f5374616b696e6752657761726473466163746f72793a3a6465706c6f793a206160448201526e1b1c9958591e4819195c1b1bde5959608a1b6064820152608401610247565b60025460405130916001600160a01b03169086906105cc90610a78565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f080158015610608573d6000803e3d6000fd5b5081546001600160a01b03199081166001600160a01b0392831617835560018084018690556002840185905560048054918201815560009081527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910180549092168784161790915582546040519216917f94f0453a2a5fef23c33126f41a260b4373e1e86d6206cffe1cae46d1ddb906119190a250505050565b6000546001600160a01b031633146106ce5760405162461bcd60e51b815260040161024790610b55565b6001600160a01b038084166000908152600560205260409020805490911661074c5760405162461bcd60e51b815260206004820152602b60248201527f5374616b696e6752657761726473466163746f72793a3a7570646174653a206e60448201526a1bdd0819195c1b1bde595960aa1b6064820152608401610247565b600181019290925560029091015550565b6000546001600160a01b031633146107875760405162461bcd60e51b815260040161024790610b55565b6001600160a01b0381166107ec5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610247565b6107f581610807565b50565b6001600160a01b03163b151590565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03808216600090815260056020526040902080549091166108e05760405162461bcd60e51b815260206004820152603660248201527f5374616b696e6752657761726473466163746f72793a3a636c61696d526577616044820152751c99105b5bdd5b9d0e881b9bdd0819195c1b1bde595960521b6064820152608401610247565b600081600101541180156108f8575060008160020154115b15610a74576001810180546002808401805460009485905593905554835460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905292939291169063a9059cbb90604401602060405180830381600087803b15801561096357600080fd5b505af1158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190610b1d565b610a0d5760405162461bcd60e51b815260206004820152603960248201527f5374616b696e6752657761726473466163746f72793a3a636c61696d5265776160448201527f7264416d6f756e743a207472616e73666572206661696c6564000000000000006064820152608401610247565b825460405163e5cd8a6f60e01b815260048101849052602481018390526001600160a01b039091169063e5cd8a6f90604401600060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b5050505050505b5050565b61139780610bb283390190565b80356001600160a01b0381168114610a9c57600080fd5b919050565b600060208284031215610ab2578081fd5b610abb82610a85565b9392505050565b60008060408385031215610ad4578081fd5b610add83610a85565b946020939093013593505050565b600080600060608486031215610aff578081fd5b610b0884610a85565b95602085013595506040909401359392505050565b600060208284031215610b2e578081fd5b81518015158114610abb578182fd5b600060208284031215610b4e578081fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000600019821415610baa57634e487b7160e01b81526011600452602481fd5b506001019056fe60c060405234801561001057600080fd5b5060405161139738038061139783398101604081905261002f9161008e565b60018055606091821b6001600160601b0319908116608052911b1660a052600080546001600160a01b0319166001600160a01b03929092169190911790556100d0565b80516001600160a01b038116811461008957600080fd5b919050565b6000806000606084860312156100a2578283fd5b6100ab84610072565b92506100b960208501610072565b91506100c760408501610072565b90509250925092565b60805160601c60a05160601c611264610133600039600081816101f4015281816104aa015281816107250152818161086f0152610aa10152600081816102830152818161059d01528181610acb01528181610b110152610bb701526112646000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c806380faa57d116100ad578063d1af0c7d11610071578063d1af0c7d1461027e578063df136d65146102a5578063e5cd8a6f146102ae578063ebe2b12b146102c1578063fc2b8cc3146102ca57600080fd5b806380faa57d146102325780638b8763471461023a578063a694fc3a1461025a578063c8f33c911461026d578063cd3daf9d1461027657600080fd5b80633fc6df6e116100f45780633fc6df6e1461019b57806370a08231146101c657806372f702f3146101ef5780637b0a47ee146102165780637b4638e71461021f57600080fd5b80628cc262146101305780630700037d1461015657806318160ddd146101765780632e1a7d4d1461017e5780633d18b91214610193575b600080fd5b61014361013e366004611070565b6102d2565b6040519081526020015b60405180910390f35b610143610164366004611070565b60076020526000908152604090205481565b600854610143565b61019161018c3660046110aa565b610352565b005b610191610516565b6000546101ae906001600160a01b031681565b6040516001600160a01b03909116815260200161014d565b6101436101d4366004611070565b6001600160a01b031660009081526009602052604090205490565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b61014360035481565b61019161022d3660046110da565b610607565b610143610796565b610143610248366004611070565b60066020526000908152604090205481565b6101916102683660046110aa565b6107a9565b61014360045481565b6101436108d1565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b61014360055481565b6101916102bc36600461110e565b61091f565b61014360025481565b610191610ceb565b6001600160a01b038116600090815260076020908152604080832054600690925282205461034c91906103469069d3c21bcecceda100000090610340906103219061031b6108d1565b90610d0e565b6001600160a01b03881660009081526009602052604090205490610d21565b90610d2d565b90610d39565b92915050565b600260015414156103aa5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600155336103b86108d1565b6005556103c3610796565b6004556001600160a01b0381161561040a576103de816102d2565b6001600160a01b0382166000908152600760209081526040808320939093556005546006909152919020555b336000908152600a6020526040902054156104675760405162461bcd60e51b815260206004820152601760248201527f5374696c6c20696e206c6f636b696e6720706572696f6400000000000000000060448201526064016103a1565b6008546104749083610d0e565b600855336000908152600960205260409020546104919083610d0e565b336000818152600960205260409020919091556104d9907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169084610d45565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a2505060018055565b3361051f6108d1565b60055561052a610796565b6004556001600160a01b0381161561057157610545816102d2565b6001600160a01b0382166000908152600760209081526040808320939093556005546006909152919020555b33600090815260076020526040902054801561060357336000818152600760205260408120556105cc907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083610d45565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486906020015b60405180910390a25b5050565b816106106108d1565b60055561061b610796565b6004556001600160a01b0381161561066257610636816102d2565b6001600160a01b0382166000908152600760209081526040808320939093556005546006909152919020555b6001600160a01b038316600090815260096020526040902054156106c15760405162461bcd60e51b815260206004820152601660248201527520b63932b0b23c9039ba30b5b2b210313c903ab9b2b960511b60448201526064016103a1565b6008546106ce9085610d39565b6008556001600160a01b0383166000908152600960205260409020546106f49085610d39565b6001600160a01b03808516600090815260096020908152604080832094909455600a90529190912083905561074d907f000000000000000000000000000000000000000000000000000000000000000016333087610dad565b826001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8560405161078891815260200190565b60405180910390a250505050565b60006107a442600254610deb565b905090565b336107b26108d1565b6005556107bd610796565b6004556001600160a01b03811615610804576107d8816102d2565b6001600160a01b0382166000908152600760209081526040808320939093556005546006909152919020555b336000908152600a60205260409020541561081e57600080fd5b60085461082b9083610d39565b600855336000908152600960205260409020546108489083610d39565b33600081815260096020908152604080832094909455600a90529182209190915561089f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316903085610dad565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d906020016105fa565b6000600854600014156108e5575060055490565b6107a461091660085461034069d3c21bcecceda100000061091060035461091060045461031b610796565b90610d21565b60055490610d39565b6000546001600160a01b0316331461098c5760405162461bcd60e51b815260206004820152602a60248201527f43616c6c6572206973206e6f742052657761726473446973747269627574696f6044820152691b8818dbdb9d1c9858dd60b21b60648201526084016103a1565b60006109966108d1565b6005556109a1610796565b6004556001600160a01b038116156109e8576109bc816102d2565b6001600160a01b0382166000908152600760209081526040808320939093556005546006909152919020555b6002546109f54284610d39565b1015610a435760405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f7420726564756365206578697374696e6720706572696f6400000060448201526064016103a1565b6002544210610a5e57610a568383610d2d565b600355610a9d565b600254600090610a6e9042610d0e565b90506000610a8760035483610d2190919063ffffffff16565b9050610a97846103408784610d39565b60035550505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161415610ba2576008546040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610b5b57600080fd5b505afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9391906110c2565b610b9d91906111d5565b610c39565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610c0157600080fd5b505afa158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3991906110c2565b9050610c458184610d2d565b6003541115610c965760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f2068696768000000000000000060448201526064016103a1565b426004819055610ca69084610d39565b60028190556040805186815260208101929092527f6c07ee05dcf262f13abf9d87b846ee789d2f90fe991d495acd7d7fc109ee1f55910160405180910390a150505050565b33600090815260096020526040902054610d0490610352565b610d0c610516565b565b6000610d1a82846111d5565b9392505050565b6000610d1a82846111b6565b6000610d1a8284611196565b6000610d1a828461117e565b6040516001600160a01b038316602482015260448101829052610da890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610e01565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610de59085906323b872dd60e01b90608401610d71565b50505050565b6000818310610dfa5781610d1a565b5090919050565b6000610e56826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610ed39092919063ffffffff16565b805190915015610da85780806020019051810190610e74919061108a565b610da85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103a1565b6060610ee28484600085610eea565b949350505050565b606082471015610f4b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103a1565b6001600160a01b0385163b610fa25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103a1565b600080866001600160a01b03168587604051610fbe919061112f565b60006040518083038185875af1925050503d8060008114610ffb576040519150601f19603f3d011682016040523d82523d6000602084013e611000565b606091505b509150915061101082828661101b565b979650505050505050565b6060831561102a575081610d1a565b82511561103a5782518084602001fd5b8160405162461bcd60e51b81526004016103a1919061114b565b80356001600160a01b038116811461106b57600080fd5b919050565b600060208284031215611081578081fd5b610d1a82611054565b60006020828403121561109b578081fd5b81518015158114610d1a578182fd5b6000602082840312156110bb578081fd5b5035919050565b6000602082840312156110d3578081fd5b5051919050565b6000806000606084860312156110ee578182fd5b833592506110fe60208501611054565b9150604084013590509250925092565b60008060408385031215611120578182fd5b50508035926020909101359150565b600082516111418184602087016111ec565b9190910192915050565b602081526000825180602084015261116a8160408501602087016111ec565b601f01601f19169190910160400192915050565b6000821982111561119157611191611218565b500190565b6000826111b157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156111d0576111d0611218565b500290565b6000828210156111e7576111e7611218565b500390565b60005b838110156112075781810151838201526020016111ef565b83811115610de55750506000910152565b634e487b7160e01b600052601160045260246000fdfea26469706673582212208130abf3deb4c5bd0a069a91206d5356878f1544523a08ca1e118260b2747a0364736f6c63430008040033a26469706673582212206c026d50eec67f384862621e87447a941decb21f0932e3380699881fd2c7fd8264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2827,
        "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "rewardsToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2829,
        "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "stakingRewardsGenesis",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2832,
        "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "stakingTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2844,
        "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
        "label": "stakingRewardsInfoByStakingToken",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(StakingRewardsInfo)2839_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(StakingRewardsInfo)2839_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingRewardsFactory.StakingRewardsInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingRewardsInfo)2839_storage"
      },
      "t_struct(StakingRewardsInfo)2839_storage": {
        "encoding": "inplace",
        "label": "struct StakingRewardsFactory.StakingRewardsInfo",
        "members": [
          {
            "astId": 2834,
            "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
            "label": "stakingRewards",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2836,
            "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2838,
            "contract": "contracts/StakingRewardsFactory.sol:StakingRewardsFactory",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}